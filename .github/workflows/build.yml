name: Python package

on: [push]

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version:
          ["3.9", "3.10", "3.11", "3.12", "3.13", "3.13t", "3.14", "3.14t"]

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff tox tox-gh-actions
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with ruff
        run: |
          # stop the build if there are Python syntax errors or undefined names
          ruff check --output-format=github --select=E9,F63,F7,F82 --target-version=py39 .
          # default set of ruff rules with GitHub Annotations
          ruff check --output-format=github --target-version=py39 .

      - name: Test with tox
        run: |
          tox

  wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]

    needs: build

    steps:
      - uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: runner.os == 'Linux'
        with:
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS_LINUX: auto aarch64
          CIBW_ARCHS_MACOS: x86_64 universal2

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl

  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    needs: build

    steps:
      - uses: actions/checkout@v5

      - name: Build source distribution
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz

  pypi-publish:
    name: Upload release to PyPI

    needs: [wheels, sdist]
    environment: pypi
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
